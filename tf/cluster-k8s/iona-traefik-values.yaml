# the ordering in this file should match the upstream values.yaml last updated
# from
# https://raw.githubusercontent.com/traefik/traefik-helm-chart/78dc3f2b6cd5af5e32b68f3feb0677bfdab3fa89/traefik/values.yaml
deployment:
  labels:
    "app.kubernetes.io/name": "traefik"
    "app.kubernetes.io/part-of": "traefik"
  # TODO: strategy: type = "Recreate" so it can run as host network single
  # instance in ingress-pool

providers:
  kubernetesCRD:
    # routes can only reference services in their own namespace
    # allowCrossNamespace: false

    # XXX: TODO: I think this is necessary to proxy to github pages for static
    # content
    allowExternalNameServices: true
volumes:
  - name: traefik-default-routes
    type: configMap
    mountPath: "/etc/traefik/dynamic/default-routes"
# additionalVolumeMounts

logs:
  general:
    level: INFO
  access:
    enabled: true

# metrics:
# globalArguments:
# All available options available on https://docs.traefik.io/reference/static-configuration/cli/
## Use curly braces to pass values: `helm install --set="additionalArguments={--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG}"`
additionalArguments:
  - --api.insecure=true
  - --entrypoints.web.address=:80
  - --entrypoints.websecure.address=:443
  - --entrypoints.ping.address=:10254
  - --ping.entrypoint=ping
  - --log.level=DEBUG
  - --accesslog=true
  - --providers.file.directory=/etc/traefik/dynamic/default-routes
  - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
  - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=gcloud
  - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
  - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
  - --certificatesresolvers.letsencrypt.acme.storage=/data/acme-staging.json
#  - "--providers.kubernetesingress.ingressclass=traefik-internal"
#  - "--log.level=DEBUG"

ports:
  websecure:
    tls:
      enabled: true
      certResolver: letsencrypt
      domains:
        - main: "thaumagen.io"
          sans: "*.thaumagen.io"

persistence:
  # using letsencrypt with persistence assumes we only use a single traefik
  # replica. if load gets to high for that to be tenable, certmanager is the
  # answer: https://cert-manager.io/docs/installation/helm/
  enabled: true

rbac:
  # created independenty in tf
  enabled: false

serviceAccount:
  name: "dns01solver-sa"

# Additional serviceAccount annotations (e.g. for oidc authentication)
serviceAccountAnnotations: {}
resources:
  requests:
    cpu: "100m"
    memory: "50Mi"
  limits:
    cpu: "300m"
    memory: "150Mi"

# need to set strategy=Replace for this to work reliably
#nodeSelector:
#  "cloud.google.com/gke-nodepool": "ingress-pool"

# tolerations:
#   - key: "ingress-pool"
#     operator: "Equal"
#     value: "true"
